 x is a byte at DS:100 ; y is a byte at DS:110; z is a byte at DS:120 ; store quotient at
 DS:130 and remainder at DS:140

VERSION 1: NO HIGHER TO HIGHER LOWER TO LOWER 
a 100
mov al, byte ptr[100] ; al =  X 
mul byte ptr[110] ; ax = x * y
add ax, 35 ; ax = xy + 35 
mov bx, ax; bx = ax or bx is the divisor 
mov bl, 30; bl = 30
mov al, byte ptr[100] ; al = y
mul bl; ax = al * bl 
mov cx, ax; cx = ax or 30y
mov bl, 2 ; bl = 2 
mov al, byte ptr[120] ; al = z
mul bl; ax = al * bl OR 2z
sub ax, cx; ax = ax - cx or 30y - 2z
mov dx, ax; dx = ax or 30y - 2z
mov ax, bx; ax = bx or xy + 35
div dx; 
mov [130], ax ; DS:130 = al
mov [140], dx ; DS:140 = ah
-----------------------------------
VERSION 2: 

a 100
mov al, byte ptr[100] ; al =  X 
mul byte ptr[110] ; ax = x * y
add ax, 35 ; ax = xy + 35 
mov dx, ax; dx = ax or dx is the dividend
mov bl, 30; bl = 30
mov al, byte ptr[100] ; al = y
mul bl; ax = al * bl 
mov cx, ax; cx = ax or 30y
mov bl, 2 ; bl = 2 
mov al, byte ptr[120] ; al = z
mul bl; ax = al * bl OR 2z
sub ax, cx; ax = ax - cx or 30y - 2z
mov bx, ax; bx = ax or bx is the divisor 
mov ax, dx; ax = bx or xy + 35
div bx; 
mov [130], ax ; DS:130 = al
mov [140], dx ; DS:140 = ah

========================================
2.
x is a word at DS:300 ; 
y is a word at DS:310; 
a is a doubleword at DS:400; b is a doubleword
at DS:410; 
store quotient at DS:430 and remainder at DS:440; 
disregard the remainders of a/x and a/y


a 100 

mov dx, [402]; dx = higher word of doubleword a
mov ax, [400]; ax = lower word of doubleword a
mov cx, word ptr[300]; cx = x
div cx; ax = dx.ax / cx or a/x
mov cx, ax; cx = ax or a/x

mov dx, [412]; dx = higher word of doubleword b
mov ax, [400]; ax = lower word of dobuleword b
mov bx, word ptr[310]; bx = y
div bx; dx.ax / bx or b/y
mov bx, ax; bx = ax or b/y

add cx, bx; cx = cx+bx or (a/x) + (b/y) || The divisor


//This is for the dividend and it is already doubleword 
mov ax, [400]; ax = the lower word in the doubleword a
add ax, [410]; lower words of a and b are added stored to ax
mov bx, [402]; bx = the higher word in the doubleword a
adc bx, [412]; higher words of a and b are added stored to bx
mov dx, bx; dx = higher words of a and b

div cx; ax = dx.ax / cx or (a+b)/(a/x)+(b/y) REM-> dx
mov [430],ax; DS:430 = ax or quotient
mov [440],dx; DS:440 = dx or remainder
